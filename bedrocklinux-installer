#!/bin/sh
### Bedrock Linux 1.0alpha4 Flopsie
### bedrocklinux-installer (BedRock installer)
# This script will (partially) install or update a Bedrock Linux system's core
# components.

# Search for "END OF FUNCTIONS" to get to where execution actually starts

print_help(){
cat << 'EOF'
Usage: bedrocklinux-installer ARGUMENT

bedrocklinux-installer will install or update a Bedrock Linux system's core components.

ARGUMENTS:
   -g  generate a blank configuration file.  If a path is provided after this,
       the file will be generated in that location; otherwise, it will be
       generated in the present working directory.
   -c  use a filled out configuration file.  If a path is provided after this,
       a file in the provided location will be used; otherwise, this script
       will look in the present working directory for a file named
       'bedrocklinux-installer.conf'
EOF
exit
}

# Announce a high-level item
announce_high(){
	high_task="$1"
	echo "$1" | tee -a $log
}

# Announce a low-level item
announce_low(){
	low_task="$1"
	echo -n "  $1... " | tee -a $log
}

# report success/failure of last task
check(){
	if [ $? -ne 0 ]
	then
		echo "Error during $high_task/$low_task" | tee -a $log
		if [ -n "$log" ]
		then
			echo "See log at"
			echo "$log"
		fi
		exit 1
	else
		echo "done."
		echo "done with $high_task/$low_task" >>$log 2>&1
	fi
}

# report failure
abort(){
	echo "Error during $high_task/$low_task" | tee -a $log
	if [ -n "$log" ]
	then
		echo "See log at"
		echo "$log"
	fi
	exit 1
}

generate_config(){
	if [ "$1" != "-g" ]
	then
		echo "Something went terribly wrong in or before generate_config(),"
		echo "aborting."
		exit 1
	fi
	if [ -n "$2" ]
	then
		out=$2
	else
		out="./bedrocklinux-installer.conf"
	fi
	announce_low "Generating config at $out"
	if [ -e $out ]
	then
		echo "Problem found."
		echo "Something already exists at $out."
		echo "Refusing to overwrite (just in case)."
		echo "Pick another location or delete or move the file."
		exit 1
	fi
cat <<EOF >$out
### Bedrock Linux 1.0alpha4 Flopsie
### bedrocklinux-installer.conf configuration file
# This file contains configuration options for the Bedrock Linux installer.
# Read the comments and fill out the appropriate fields, then pass this file as
# an argument to bedrocklinux-installer.sh like so:
# ./bedrocklinux-installer.sh -c bedrocklinux-installer.conf

### Make Job count
# How many things should `make` try to do simultaneously?
# If you aren't sure, the command below should give a sane default:
#     awk '/^processor/{x=$3}END{print x+2}' /proc/cpuinfo
JOBS=

### Install, Update or Neither
# The installer ultimately has three purposes:
# - to install a new system
# - to update an exisitng system
# - to generate things for some other purpose
# By specifying which of these is being done, the installer can perform
# additional sanity checks.
# Set "INSTALL" to "y" if installing or UPDATE to "y" if updating; set both to
# "n" if you simply want to use the script to generate files for another
# purpose.
INSTALL=
UPDATE=

### Directories
# Various directories the installer will need specified.
#
## Output
# This directory is where the final output will be placed.  If you are
# installing a new Bedrock Linux system, be sure you partition, format and
# mount the desired partitions in this directory *before* running the
# installer, as the installer will *not* do this for you.  If you are just
# compiling a handful of components (e.g.: just the busybox executable to
# update it to fix a security hole), then you can probably skip
# partitioning/formatting/mounting.
#
# e.g.: OUTPUT=/mnt/bedrock
OUTPUT_DIR=
#
## Scratch
# This is the directory where the installer will place temporary files.
# e.g.: SCRATCH_DIR=/tmp/bedrocklinux-installer-scratch
SCRATCH_DIR=

### Components
# All of the components of a Bedrock Linux 1.0alpha4 Flopsie system which the
# accompanying script can install are listed below.  Set each one you would
# like to have the accompanying script install to 'y' or, if you would prefer
# to have it skipped, to 'n'.
#
# Enabling some of the items below, but not all, may be useful to update a
# component.  However, if you would like to install a complete Bedrock Linux
# system, you'll want to set everything (with the possible exception of
# MAKE_FSCK)
#
## Userland
# If set to 1, this will create:
# - Any Bedrock Linux directories which do not already exist
# - All of the plain-text files
#   - default/blank config files
#   - scripts
MAKE_USERLAND=
## brc
# The brc (BedRock Chroot) utility.
MAKE_BRC=
## brf
# The brf (BedRock Filesystem) utility.
MAKE_BRF=
## brp
# The brp (BedRock Path) utility.
MAKE_BRP=
## caputils
# POSIX capabilities utilities required for manipulating POSIX capabilities.
MAKE_CAPUTILS=
## busybox
# Busybox, which provides the majority of the UNIXy utilities.
MAKE_BUSYBOX=
## fsck.ext2-4
# Filesystem checker.  The installer assumes you're using one of the following
# filesystems:
# - ext2
# - ext3
# - ext4
# If you're using another one, you may want to install a different filesystem
# checker manually.
# Optional for a functional system.
MAKE_FSCK=

### Source code location
# For each of the following items, specify where the installer can find either
# a tarball (which the installer will untar for you) or a directory with the
# source code (e.g.: untar'd tarball or cloned VCS repo).  Depending on MAKE_*
# items set above, some of these may be optional.
#
## The Bedrock Linux userland
# The tarball for the Bedrock Linux userland.  Required for:
# - MAKE_USERLAND
# - MAKE_BRC
# - MAKE_BRF
# - MAKE_BRP
# You can probably find a tarball here:
#     http://bedrocklinux.org/1.0alpha4/bedrock-userland-1.0alpha4.tar.gz
# or a git repo here:
#     https://github.com/paradigm/bedrocklinux-userland
# This version of this installer is aimed specifically at the 1.0alpha4 version.
BEDROCK_USERLAND_SRC=
## musl-libc
# The musl C library
# Required for:
# - MAKE_BRC
# - MAKE_BRF
# - MAKE_BRP
# - MAKE_BUSYBOX
# - MAKE_CAPUTILS
# - MAKE_FSCK
# You can probably find a tarball or VCS repo here:
#     http://www.musl-libc.org/
# This version of this installer was tested against musl version 0.9.12; a
# newer version will probably be fine.
MUSL_SRC=
## libcap
# The POSIX Capabilities library
# Required for:
# - MAKE_BRC
# - MAKE_CAPUTILS
# You can probably find a tarball or VCS repo here:
# http://sites.google.com/site/fullycapable
LIBCAP_SRC=
## Linux kernel (for headers)
# The linux kernel is distributed with header files which are needed to compile
# some components.  Note, the installer will not actually compile the kernel
# itself.
# Required for:
# - MAKE_BRC
# You can probably find a tarball or VCS repo here:
# https://www.kernel.org/
KERNEL_SRC=
## fuse
# The FUSE development libraries
# Required for:
# - MAKE_BRF
# - MAKE_BRP
# You can probably find a tarball or VCS repo here:
#     http://fuse.sourceforge.net/
# This was only tested against exactly version 2.9.3.  The installer will patch
# the source and may fail against other versions.
FUSE_SRC=
## Busybox
# Required for:
# - MAKE_BUSYBOX
# You can probably find a tarball or VCS repo here:
#     http://www.busybox.net/
# Note you need at least 1.20, as there seems to be a bug before that which is
# problematic with Bedrock Linux.
BUSYBOX_SRC=
## fsck.ext2-4
# Required for:
# - MAKE_FCSK
# You can probably find a tarball or VCS repo here:
#     http://e2fsprogs.sourceforge.net/
FSCK_SRC=

### Miscellaneous
#
## busybox config
# If you would like to specify the busybox config to use, provide the path to
# it here.  If you leave it a blank, a (hopefully sane) default will be chosen
# for you.  Be careful to ensure it specififes static compilation, that it has
# all of the applets Bedrock Linux will need, and that it supports "--install".
# Note this is ignored of MAKE_BUSYBOX is 'n'.
BUSYBOX_CONFIG=
EOF
}

define_dependents(){
	BEDROCK_USERLAND_DEPS="USERLAND BRC BRF BRP"
	MUSL_DEPS="BRC BRF BRP BUSYBOX CAPUTILS FSCK"
	LIBCAP_DEPS="BRC CAPUTILS"
	KERNEL_DEPS="BRC"
	FUSE_DEPS="BRF BRP"
	BUSYBOX_DEPS="BUSYBOX"
	FSCK_DEPS="FSCK"
}

has_dependents(){
	define_dependents

	DEPS=$(eval 'echo $'"$(echo $1)_DEPS")
	for DEP in $(echo $DEPS)
	do
		MAKE=$(eval 'echo $MAKE_'"$(echo $DEP)")
		if [ "$MAKE" = "y" ]
		then
			return 0
		fi
	done
	return 1
}

source_config(){
	if [ "$1" != "-c" ]
	then
		echo "Something went wrong in or before source_config,"
		echo "aborting."
		exit 1
	fi
	if [ -n "$2" ]
	then
		in=$2
	else
		in="./bedrocklinux-installer.conf"
	fi
	announce_low "Parsing config at $in"
	. $in
	check
}

sanity_check_config(){
	announce_low "Running sanity check on config"
	### Ensure JOBS is an int
	if echo $JOBS | grep -q "[^0-9]" ||  [ -z "$JOBS" ] || [ "$JOBS" -lt "1" ]
	then
			echo "Problem found."
			echo "JOBS should be an integer greater than or equal to 1."
			exit 1
	fi

	### Ensure valid values for binary items
	for OPTION in 'MAKE_USERLAND' 'MAKE_BRC' 'MAKE_BRF' 'MAKE_BRP' 'MAKE_CAPUTILS' 'MAKE_BUSYBOX' 'MAKE_FSCK'
	do
		OPTION_VAL=$(eval 'echo $'$OPTION)
		if [ "$OPTION_VAL" != "y" ] && [ "$OPTION_VAL" != "n" ]
		then
			echo "Problem found."
			echo "$OPTION should be either \"y\" or \"n\""
			exit 1
		fi
	done

	### Ensure valid value for SRC items
	for SRC in 'BEDROCK_USERLAND_SRC' 'MUSL_SRC' 'LIBCAP_SRC' 'KERNEL_SRC' 'FUSE_SRC' 'BUSYBOX_SRC' 'FSCK_SRC'
	do
		SRC_VAL=$(eval 'echo $'$SRC)
		PROBLEM=0
		if [ -n "$SRC_VAL" ] && ! [ -d "$SRC_VAL" ] && ! [ -f "$SRC_VAL" ]
		then
			PROBLEM=1
		fi
		if [ -d "$SRC_VAL" ] && [ -z "$(ls $SRC_VAL -A)" ]
		then
			PROBLEM=1
		fi
		if [ "$PROBLEM" = "1" ]
		then
			echo "Problem found."
			echo "$SRC should be either a path to a non-empty directory, a"
			echo "tarball, or a empty string"
			exit 1
		fi
	done

	### Ensure valid value for BUSYBOX_CONFIG
	if [ "$MAKE_BUSYBOX" = "y" ] && [ -n "$BUSYBOX_CONFIG" ] && ! [ -f "$BUSYBOX_CONFIG" ]
	then
		echo "Problem found."
		echo "BUSYBOX_CONFIG should be a path to a file."
		exit 1
	fi

	### Ensure required directories exist
	if ! [ -d "$OUTPUT_DIR" ]
	then
		echo "Problem found."
		echo "OUTPUT_DIR setting \"$OUTPUT_DIR\" is not a directory, aborting"
		exit 1
	fi
	if ! [ -d "$SCRATCH_DIR" ]
	then
		echo "Problem found."
		echo "SCRATCH_DIR setting \"$SCRATCH_DIR\" is not a directory, aborting"
		exit 1
	fi

	### Check INSTALL, UPDATE
	# Ensure not installing and updating
	if [ "$INSTALL" = "y" ] && [ "$UPDATE" = "y" ]
	then
		echo "Problem found."
		echo "INSTALL and UPDATE should not both be \"y\""
		exit 1
	fi
	# if installing, we want to sure things aren't already in place
	if [ "$INSTALL" = "y" ]
	then
		# Ensure the MAKE items (baring directories, which could be mounted) do
		# not already exist
		if [ "$MAKE_BRC" = "y" ] && [ -e "$OUTPUT_DIR/bedrock/bin/brc" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_BRC are set, but brc already seems to be in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/bin/brc"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BRF" = "y" ] && [ -e "$OUTPUT_DIR/bedrock/sbin/brf" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_BRF are set, but brf already seems to be in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/sbin/brf"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BRP" = "y" ] && [ -e "$OUTPUT_DIR/bedrock/sbin/brp" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_BRP are set, but brp already seems to be in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/sbin/brp"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_CAPUTILS" = "y" ] && [ -e "$OUTPUT_DIR/bedrock/sbin/setcap" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_CAPUTILS are set, but setcap (and possibly"
			echo "other caputils) already seem to be in place at "
			echo "$OUTPUT_DIR/bedrock/sbin/setcap"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BUSYBOX" = "y" ] && [ -e "$OUTPUT_DIR/bedrock/bin/busybox" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_BUSYBOX are set, but busybox already seems"
			echo "to be in place at "
			echo "$OUTPUT_DIR/bedrock/bin/busybox"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_FSCK" = "y" ]
		then
			if [ -e "$OUTPUT_DIR/sbin/fsck.ext2" ] ||\
				[ -e "$OUTPUT_DIR/sbin/fsck.ext3" ] ||\
				[ -e "$OUTPUT_DIR/sbin/fsck.ext4" ]
			then
				echo "Problem found."
				echo "INSTALL and MAKE_FSCK are set, but fsck.ext* already seems to be in"
				echo "place at "
				echo "$OUTPUT_DIR/sbin/fsck.ext*"
				echo "Aborting just in case."
				exit 1
			fi
		fi
		# Ensure OUTPUT_DIR is a mount point.  If a directory is a mount point,
		# it will have a different device number from its parent
		if [ "$(stat -fc%t:%T $OUTPUT_DIR)" = "$(stat -fc%t:%T $OUTPUT_DIR/../)" ]
		then
			echo "Problem found."
			echo "It doesn't look like $OUTPUT_DIR is a mount point, and"
			echo "INSTALL is set.  There is probably something wrong."
			echo "Aborting just in case."
			exit 1
		fi
	fi
	# If updating, we want to ensure what we're replacing exists
	if [ "$UPDATE" = "y" ]
	then
		if [ "$MAKE_BRC" = "y" ] && ! [ -e "$OUTPUT_DIR/bedrock/bin/brc" ]
		then
			echo "Problem found."
			echo "UPDATE and MAKE_BRC are set, but brc is not already in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/bin/brc"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BRF" = "y" ] && ! [ -e "$OUTPUT_DIR/bedrock/sbin/brf" ]
		then
			echo "Problem found."
			echo "UPDATE and MAKE_BRF are set, but brf is not already in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/sbin/brf"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BRP" = "y" ] && ! [ -e "$OUTPUT_DIR/bedrock/sbin/brp" ]
		then
			echo "Problem found."
			echo "UPDATE and MAKE_BRP are set, but brp is not already in"
			echo "place at "
			echo "$OUTPUT_DIR/bedrock/sbin/brp"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_CAPUTILS" = "y" ] && ! [ -e "$OUTPUT_DIR/bedrock/sbin/setcap" ]
		then
			echo "Problem found."
			echo "INSTALL and MAKE_CAPUTILS are set, but setcap (and possibly"
			echo "other caputils) is not already seem to be in place at "
			echo "$OUTPUT_DIR/bedrock/sbin/setcap"
			echo "Aborting just in case."
			exit 1
		fi
		if [ "$MAKE_BUSYBOX" = "y" ] && ! [ -e "$OUTPUT_DIR/bedrock/bin/busybox" ]
		then
			echo "Problem found."
			echo "UPDATE and MAKE_BUSYBOX are set, but busybox is not already"
			echo "in place at "
			echo "$OUTPUT_DIR/bedrock/bin/busybox"
			echo "Aborting just in case."
			exit 1
		fi
	fi

	### Ensure source dependencies are met
	for CMP in $(echo "BEDROCK_USERLAND MUSL LIBCAP KERNEL FUSE BUSYBOX FSCK")
	do
		SRC=$(eval 'echo $'"$(echo $CMP)_SRC")
		if [ -z "$SRC" ]
		then
			DEPS=$(eval 'echo $'"$(echo $CMP)_DEPS")
			for DEP in $(echo $DEPS)
			do
				MAKE=$(eval 'echo $MAKE_'"$(echo $DEP)")
				if [ "$MAKE" = "y" ]
				then
					echo "Problem found."
					echo ""
					echo "MAKE_${DEP} is set to 1 but a dependency,"
					echo "${CMP}_SRC, is undefined"
					exit 1
				fi
			done
		fi
	done

	check
}

copy_untar(){
	announce_low "Copying/untaring $1"
	# we could be copying a directory OR untaring

	runcmd "mkdir -p $src/$1" || abort
	if [ -d $2 ]
	then
		runcmd "cp -r $2 $src/$1"
	else
		runcmd "cd $src/$1"
		runcmd "tar xvf $2"
	fi

	check
}

# this is only used for fuse at the moment, so things are hardcoded for fuse
# specifically, only tested against fuse 2.9.3
# hopefully the patches will be upstreamed and this will be unnecessary
apply_patches(){
	announce_low "Patching FUSE"
	# generate patches
	mkdir -p $SCRATCH_DIR/patches/fuse
cat << 'EOF' >$SCRATCH_DIR/patches/fuse/fuse-headers.patch
--- fuse-2.9.3.org/include/fuse_common.h
+++ fuse-2.9.3/include/fuse_common.h
@@ -28,8 +28,8 @@
 #define FUSE_MAKE_VERSION(maj, min)  ((maj) * 10 + (min))
 #define FUSE_VERSION FUSE_MAKE_VERSION(FUSE_MAJOR_VERSION, FUSE_MINOR_VERSION)
 
-/* This interface uses 64 bit off_t */
-#if _FILE_OFFSET_BITS != 64
+/* This interface uses 64 bit off_t, and only glibc has an implementation with 2 different sizes */
+#if defined(__GLIBC__) && _FILE_OFFSET_BITS != 64
 #error Please add -D_FILE_OFFSET_BITS=64 to your compile flags!
 #endif
 
EOF
cat << 'EOF' >$SCRATCH_DIR/patches/fuse/fuse-lock.patch
--- fuse-2.9.3.org/lib/fuse_lowlevel.c
+++ fuse-2.9.3/lib/fuse_lowlevel.c
@@ -24,6 +24,7 @@
 #include <limits.h>
 #include <errno.h>
 #include <assert.h>
+#include <sys/file.h>
 
 #ifndef F_LINUX_SPECIFIC_BASE
 #define F_LINUX_SPECIFIC_BASE       1024
--- fuse-2.9.3.org/lib/fuse.c
+++ fuse-2.9.3/lib/fuse.c
@@ -37,6 +37,7 @@
 #include <sys/uio.h>
 #include <sys/time.h>
 #include <sys/mman.h>
+#include <sys/file.h>
 
 #define FUSE_NODE_SLAB 1
 
EOF
cat << 'EOF' >$SCRATCH_DIR/patches/fuse/fuse-paths.patch
--- fuse-2.9.3.org/lib/mount_util.c
+++ fuse-2.9.3/lib/mount_util.c
@@ -16,6 +16,7 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <limits.h>
+#include <paths.h>
 #ifndef __NetBSD__
 #include <mntent.h>
 #endif
--- fuse-2.9.3.org/util/fusermount.c
+++ fuse-2.9.3/util/fusermount.c
@@ -20,6 +20,7 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <pwd.h>
+#include <paths.h>
 #include <mntent.h>
 #include <sys/wait.h>
 #include <sys/stat.h>
EOF
	for patch in $SCRATCH_DIR/patches/fuse/*
	do
		runcmd "cd $SCRATCH_DIR/src/FUSE/"
		runcmd "cd $(ls)"
		runcmd "patch -p1 < $patch" >>$log 2>&1 || abort
	done
	check
}

runcmd(){
	echo "" >>$log 2>&1
	echo "\`$@\`" >>$log 2>&1
	eval "$@" >>$log 2>&1
}

configure(){
	announce_low "Configuring $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "./configure $@"
	check
}

compile(){
	announce_low "Compiling $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "make -j$JOBS $@"
	check
}

install(){
	announce_low "Installing $task"
	runcmd "cd $src/$task/"
	runcmd "cd $(ls)"
	runcmd "make install $@"
	check
}

busybox_defconfig(){
	announce_low "Generating busybox config"
	runcmd 'cd $SCRATCH_DIR/src/$task/'
	runcmd 'cd $(ls)'
	# use busybox's default config
	runcmd 'make defconfig'
	# ensure static
	if ! grep -q "^CONFIG_STATIC" .config 2>/dev/null
	then
		runcmd 'echo "CONFIG_STATIC=y" >> .config'
	elif grep -q "^CONFIG_STATIC=n" .config 2>/dev/null
	then
		runcmd 'sed "s/^CONFIG_STATIC=n/CONFIG_STATIC=y/" .config > .config-new'
		runcmd 'mv .config-new .config'
	fi
	check
}

busybox_test(){
	# test busybox in case either the user provides a bad .config or there's
	# some issue between busybox and something else (like musl or ld)
	announce_low "Testing $1"

	echo "Testing to see if it runs at all" >>$log
	if ! ./$1 >>$log 2>&1
	then
		echo "$1 did not run correctly" | tee -a $log
		return 1
	fi

	# if ldd returns 0, then it is NOT static
	echo "Testing to see if it is static" >>$log
	if ldd $1 >>$log 2>&1
	then
		echo "$1 is not static" | tee -a $log
		return 1
	fi

	echo "Testing for missing applets" >>$log
	MISSINGAPPLETS=""
	for APPLET in "\[" awk basename cat chmod chroot chvt clear\
		cmp cp cut dd df dirname echo ed env expand expr false find\
		free getty grep head hostname hwclock id init install\
		kill last ln ls mdev mkdir more mount mt od passwd\
		printf ps readlink reset rm route sed seq sh sleep sort\
		split stat swapon sync tail time top touch true tty umount\
		uname vi wc wget which xargs yes
	do
		if ! ./$1 | awk 'p==1;/^Currently/{p=1}' | tr -d ',\n' | sed 's/[ \t]/\n/g' | grep -q "^$APPLET$"
		then
			MISSINGAPPLETS="$MISSINGAPPLETS $APPLET"
		fi
	done
	if [ -n "$MISSINGAPPLETS" ]
	then
		echo "$1 is missing the following applets: $MISSINGAPPLETS" | tee -a $log
		return 1
	fi

	echo "Testing for --install" >>$log
	if ! $1 | grep -q -- "--install"
	then
		echo "$1 is missing --install" | tee -a $log
	fi
	echo "$1 looks good"
	return 0
}

ensure_static(){
	announce_low "Ensuring $1 is static"
	if ldd "$1" >>$log 2>&1
	then
		echo "The file at"
		echo "$1"
		echo "Does not appear to be a statically-linked executable."
		echo "Looks like maybe something went wrong.  Aborting."
		exit 1
	fi
	check
}

# END OF FUNCTIONS
# execution actually starts here

# New users may run this without RTFM'ing.  As a sanity measure, print some
# help if no flags are provided.
if [ "$1" != "-c" ] && [ "$1" != "-g" ]
then
	print_help
fi

echo "-----------------------------------------"
echo "Bedrock Linux 1.0alpha4 Flopsie installer"
echo "-----------------------------------------"
echo ""

# can't log yet since SCRATCH hasn't yet been defined
log="/dev/null"

announce_high "Early Setup"

# If the first argument is "-g", generate a blank configuration file for this
# installer.
if [ "$1" = "-g" ]
then
	generate_config "$@"
fi

# The first argument has to be "-c", indicating a config is available.  Attempt
# to source it and do some sanity checks on it.
source_config "$@"
sanity_check_config

if [ -n "$(ls -A $OUTPUT_DIR)" ]
then
cat <<EOF
WARNING: $OUTPUT_DIR is not empty.  If this is because of a previous run, you
may want to clear it out.  Be careful not to remove files you may want in
there, such as a mounted /home directory.
Sleeping for 10 seconds, hit ctrl-c to abort

EOF
	sleep 10
fi

# clear scratch
if [ -n "$(ls -A $SCRATCH_DIR)" ]
then
	announce_low "Setting up $SCRATCH_DIR"
	rm -rf $SCRATCH_DIR/*    || abort
	touch $SCRATCH_DIR/test || abort
	rm $SCRATCH_DIR/test    || abort
	check
fi

# set up some vars for stuff in SCRATCH_DIR
log="$SCRATCH_DIR/log"
dev="$SCRATCH_DIR/dev"
src="$SCRATCH_DIR/src"

# setup log
if [ -n "$2" ]
then
	in=$2
else
	in="./bedrocklinux-installer.conf"
fi
announce_low "Verbose logging to $log"
(
# could not log before this as we did not know where to log
# populate log with what we have already announced
cat <<EOF
-----------------------------------------
Bedrock Linux 1.0alpha4 Flopsie installer
-----------------------------------------

EOF
cat <<EOF
Early Setup
  Parsing config at $in... done.
  Running sanity check on config... done.
EOF
if [ -n "$(ls -A $OUTPUT_DIR)" ]
then
cat << 'EOF'
WARNING: $OUTPUT_DIR is not empty.  If this is because of a previous run, you
may want to clear it out.  Be careful not to remove files you may want in
there, such as a mounted /home directory.
Sleeping for 10 seconds, hit ctrl-c to abort

EOF
fi
cat <<EOF
  Setting up $SCRATCH_DIR... done.
  Verbose logging to $log...
EOF
) > $log
check
echo "  (consider \`tail -f $log\`)" | tee -a $log


announce_high "Preparing source"
for CMP in $(echo "BEDROCK_USERLAND MUSL LIBCAP KERNEL FUSE BUSYBOX FSCK")
do
	if has_dependents $CMP
	then
		SRC=$(eval 'echo $'"$(echo $CMP)_SRC")
		copy_untar "$CMP" "$SRC"
	else
		echo "  (Skipping $CMP, not required)" | tee -a $log
	fi
done

announce_high "Preparing development stack"
task="MUSL"
if has_dependents "$task"
then
	configure --prefix=$dev --disable-shared --enable-static
	compile
	install
	announce_low "Fixing lib/lib64 confusion"
	runcmd "ln -s $dev/lib $dev/lib64"
	check
else
	echo "  (Skipping $task, not required)" | tee -a $log
fi
task="LIBCAP"
if has_dependents "$task"
then
	compile
	install DESTDIR=$dev prefix=/ RAISE_SETFCAP=NO
	for exe in $dev/sbin/*
	do
		ensure_static "$exe"
	done
else
	echo "  (Skipping $task, not required)" | tee -a $log
fi
task="FUSE"
if has_dependents "$task"
then
	apply_patches
	configure --prefix=$dev --disable-shared --enable-static --disable-util
	compile 'CC='"$dev/bin/musl-gcc"
fi
task="KERNEL"
if has_dependents "$task"
then
	compile 'headers_install INSTALL_HDR_PATH='"$dev"
else
	echo "  (Skipping $task, not required)" | tee -a $log
fi

announce_high "Compiling components"
task="BRC"
if [ "$MAKE_BRC" = "y" ]
then
	announce_low "Compiling BRC"
	runcmd 'cd $SCRATCH_DIR/src/BEDROCK_USERLAND/'
	runcmd 'cd $(ls)'
	runcmd 'cd src/brc'
	runcmd 'make CC='"$dev/bin/musl-gcc"
	check
	ensure_static 'brc'
else
	echo "(Skipping $task, not required)" | tee -a $log
fi
task="BUSYBOX"
if [ "$MAKE_BUSYBOX" = "y" ]
then
	if [ -z "$BUSYBOX_CONFIG" ]
	then
		busybox_defconfig
	else
		runcmd 'cp "$BUSYBOX_CONFIG" "$SCRATCH_DIR/tmp/$task/.config"'
	fi
	compile 'CC='"$dev/bin/musl-gcc"
	# older versions of ld apparently break busybox when stripping it.  Test if
	# it runs stripped vs unstripped.
	runcmd 'cd $SCRATCH_DIR/src/$task/'
	runcmd 'cd $(ls)'
	new_busybox=""
	if ! busybox_test ./busybox
	then
		if ! busybox_test ./busybox_unstripped
		then
			echo "Failed to create suitable busybox"
			abort
		else
			new_busybox=./busybox_unstripped
		fi
	else
		new_busybox=./busybox
	fi
	ensure_static "$new_busybox"
else
	echo "(Skipping $task, not required)" | tee -a $log
fi
task="FSCK"
if [ "$MAKE_FSCK" = "y" ]
then
	configure LDFLAGS=-static
	compile LDFLAGS=-static
	ensure_static 'e2fsck/e2fsck'
else
	echo "(Skipping $task, not required)" | tee -a $log
fi
